package ru.kortunov.dnd.telegram.bot.dnd_tg_bot

import org.slf4j.LoggerFactory
import org.telegram.telegrambots.bots.TelegramLongPollingBot
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow
import org.telegram.telegrambots.meta.exceptions.TelegramApiException

/**
 * Telegram –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ D&D —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—É–±–∏–∫–∞–º–∏.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –Ω–∏–º –∏ –±—Ä–æ—Å–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫—É–±–∏–∫–æ–≤.
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä–æ–∫–æ–≤
 * - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ –∫–æ–¥—É
 * - –ë—Ä–æ—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—É–±–∏–∫–æ–≤ (d4, d6, d8, d10, d12, d20, d100)
 * - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—Ä–æ—Å–∫–æ–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
 * - –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
 */
class DnDDiceBot : TelegramLongPollingBot() {

    private val BOT_TOKEN = System.getenv("BOT_TOKEN") ?: error("BOT_TOKEN is not set in environment variables")
    private val BOT_USERNAME =  System.getenv("BOT_USERNAME") ?: error("BOT_USERNAME is not set in environment variables")

    /**
     * –ö–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     * –ö–ª—é—á: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ó–Ω–∞—á–µ–Ω–∏–µ: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private val userStates = mutableMapOf<Long, UserState>()

    /**
     * –ö–∞—Ä—Ç–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –∫–æ–º–Ω–∞—Ç–µ
     * –ö–ª—é—á: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ó–Ω–∞—á–µ–Ω–∏–µ: –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    private val pendingJoins = mutableMapOf<Long, String>()

    private val seesionCodeByUserId: MutableMap<Long, String> = mutableMapOf()

    override fun getBotToken(): String = BOT_TOKEN


    override fun getBotUsername(): String = BOT_USERNAME

    val LOG = LoggerFactory.getLogger(javaClass.name)

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    override fun onUpdateReceived(update: Update) {
        try {
            if (update.hasMessage()) {
                handleMessage(update)
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update)
            }
        } catch (e: Exception) {
            LOG.error(e.message)
            e.printStackTrace()
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
     */
    private fun handleMessage(update: Update) {
        val message = update.message
        val chatId = message.chatId
        val userId = message.from.id
        val text = message.text ?: return
        LOG.debug("User: $userId, send message $text")

        when {
            text == "/start" -> {
                sendWelcomeMessage(chatId)
                showDiceKeyboard(chatId)
            }

            text == "/help" -> {
                sendHelpMessage(chatId)
            }

            text == "/stats"  -> {
                sendStatistics(chatId, userId)
            }

            text == "/leave"  -> {
                leaveSession(chatId, userId)
            }

            text == "/create"  -> {
                userStates[userId] = UserState.WAITING_FOR_PLAYER_COUNT
                sendMessage(chatId, "üë• –ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã (–æ—Ç 1 –¥–æ 20):")
            }

            text == "/cancel" -> {
                userStates.remove(userId)
                pendingJoins.remove(userId)
                sendMessage(chatId, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                showDiceKeyboard(chatId)
            }

            text.startsWith("/join") -> {
                handleJoinCommand(chatId, userId, text)
            }

            userStates[userId] == UserState.WAITING_FOR_PLAYER_COUNT -> {
                handlePlayerCountInput(chatId, userId, text)
            }

            userStates[userId] == UserState.WAITING_FOR_NAME -> {
                handleNameInput(chatId, userId, text)
            }

            userStates[userId] == UserState.WAITING_FOR_JOIN_NAME -> {
                handleJoinNameInput(chatId, userId, text)
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –∫—É–±–∏–∫–æ–≤
            DiceType.values().any { it.displayName == text } -> {
                handleDiceButtonPress(chatId, userId, text)
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã
     */
    private fun handleCallbackQuery(update: Update) {
        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback query, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
     * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private fun sendWelcomeMessage(chatId: Long) {
        val text = """
            üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DnD Dice Bot! üé≤
            
            –ö–æ–º–∞–Ω–¥—ã:
            /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
            /create - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É 
            /join [–∫–æ–¥] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /join ABC123)
            /stats - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ—Å–∫–∏
            /leave - –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
            /help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
            /cancel - –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        """.trimIndent()

        sendMessage(chatId, text)
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
     * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private fun sendHelpMessage(chatId: Long) {
        val text = """
            üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:
            
            1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:
            –û—Ç–ø—Ä–∞–≤—å /create –∏ —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è
            
            2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:
            –û—Ç–ø—Ä–∞–≤—å /join [–∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã]
            –ü—Ä–∏–º–µ—Ä: /join ABC123
            –ó–∞—Ç–µ–º –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è
            
            3Ô∏è‚É£ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤:
            –ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
            –ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –∫—É–±–∏–∫ —á—Ç–æ–±—ã –µ–≥–æ –±—Ä–æ—Å–∏—Ç—å!
            –ë—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫–∏ –º–æ–∂–Ω–æ –∏ –±–µ–∑ –∫–æ–º–Ω–∞—Ç—ã, –Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–µ –±—É–¥–µ—Ç
            
            4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
            /stats - –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ—Å–∫–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            
            5Ô∏è‚É£ –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:
            /leave - –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
            
            6Ô∏è‚É£ –û—Ç–º–µ–Ω–∞:
            /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        """.trimIndent()

        sendMessage(chatId, text)
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param text –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤
     */
    private fun handlePlayerCountInput(chatId: Long, userId: Long, text: String) {
        val maxPlayers = text.toIntOrNull()
        if (maxPlayers == null || maxPlayers < 1 || maxPlayers > 20) {
            sendMessage(chatId, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 20! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
            return
        }

        val session = SessionManager.createSession(userId, maxPlayers)
        userStates.remove(userId)

        val responseText = """
            ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!
            
            üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: ${session.code}
            üë• –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: ${session.maxPlayers}
            
            –û—Ç–ø—Ä–∞–≤—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:
        """.trimIndent()

        sendMessage(chatId, responseText)
        seesionCodeByUserId[userId] = session.code

        LOG.info("User: $userId create session: ${session.code} for $maxPlayers players")
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—Ä—É–µ–º—É—é –∫–æ–º–∞–Ω–¥—É
        sendMessage(chatId, "`/join ${session.code}`", parseMode = "Markdown")

        userStates[userId] = UserState.WAITING_FOR_NAME
        sendMessage(chatId, "üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param text —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã
     */
    private fun handleJoinCommand(chatId: Long, userId: Long, text: String) {
        val parts = text.split(" ", limit = 2)
        if (parts.size < 2) {
            sendMessage(chatId, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: /join [–∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã]")
            return
        }

        val sessionCode = parts[1].trim()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        val session = SessionManager.getSession(sessionCode)
        if (session == null) {
            sendMessage(chatId, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å –∫–æ–¥–æ–º `$sessionCode` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞.", parseMode = "Markdown")
            return
        }

        if (!session.isActive) {
            sendMessage(chatId, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!")
            return
        }

        if (session.players.size >= session.maxPlayers) {
            sendMessage(chatId, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!")
            return
        }

        if (session.hasPlayer(userId)) {
            sendMessage(chatId, "‚ùå –¢—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ!")
            showDiceKeyboard(chatId)
            return
        }

        seesionCodeByUserId[userId] = sessionCode
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø—Ä–æ—Å–∏–º –∏–º—è
        pendingJoins[userId] = sessionCode
        userStates[userId] = UserState.WAITING_FOR_JOIN_NAME
        sendMessage(chatId, "‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param name –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞
     */
    private fun handleJoinNameInput(chatId: Long, userId: Long, name: String) {
        val sessionCode = pendingJoins[userId]
        if (sessionCode == null) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /join")
            userStates.remove(userId)
            return
        }

        // –û–±—Ä–µ–∑–∞–µ–º –∏–º—è –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
        val playerName = name.trim().take(50)
        if (playerName.isEmpty()) {
            sendMessage(chatId, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
            return
        }

        val session = SessionManager.getSession(sessionCode)
        if (session == null) {
            sendMessage(chatId, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            userStates.remove(userId)
            pendingJoins.remove(userId)
            return
        }

        if (session.addPlayer(userId, playerName)) {
            sendMessage(chatId, "‚úÖ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–∞–∫ $playerName!")

            userStates.remove(userId)
            pendingJoins.remove(userId)

            showDiceKeyboard(chatId)

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
            val allPlayers = SessionManager.getAllPlayersInSession(sessionCode)
            for (playerId in allPlayers) {
                if (playerId != userId) {
                    sendMessage(playerId, "üë§ $playerName –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
                }
            }
        } else {
            sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞)")
            userStates.remove(userId)
            pendingJoins.remove(userId)
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç–µ
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param name –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
     */
    private fun handleNameInput(chatId: Long, userId: Long, name: String) {
        val session = SessionManager.getUserSession(userId)
        if (session == null) {
            sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!")
            return
        }

        // –û–±—Ä–µ–∑–∞–µ–º –∏–º—è –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
        val playerName = name.trim().take(30)
        if (playerName.isEmpty()) {
            sendMessage(chatId, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
            return
        }

        session.addPlayer(userId, playerName)
        userStates.remove(userId)

        sendMessage(chatId, "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, $playerName!")
        showDiceKeyboard(chatId)
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É–±–∏–∫–∞–º–∏
     * @param chatId ID —á–∞—Ç–∞
     */
    private fun showDiceKeyboard(chatId: Long) {
        val keyboard = createDiceKeyboard()
        sendMessage(
                chatId = chatId,
                text = "üé≤ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤! \n" +
                        " –ò–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–∏–ø –∫—É–±–∏–∫–∞ –ø–æ –ø—Ä–∏–º–µ—Ä—É: d6 \n" +
                        " –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫—É–±–∏–∫–æ–≤: d4, d6, d8, d10, d12, d20, d100",
                keyboard = keyboard
        )
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫—É–±–∏–∫–æ–≤
     * @return –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫—É–±–∏–∫–æ–≤
     */
    private fun createDiceKeyboard(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        keyboard.selective = true
        keyboard.resizeKeyboard = true
        keyboard.oneTimeKeyboard = false

        val rows = mutableListOf<KeyboardRow>()

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥: d4, d6, d8, d10
        val row1 = KeyboardRow()
        row1.add(KeyboardButton("d4"))
        row1.add(KeyboardButton("d6"))
        row1.add(KeyboardButton("d8"))
        row1.add(KeyboardButton("d10"))
        rows.add(row1)

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥: d12, d20, d100
        val row2 = KeyboardRow()
        row2.add(KeyboardButton("d12"))
        row2.add(KeyboardButton("d20"))
        row2.add(KeyboardButton("d100"))
        rows.add(row2)

        keyboard.keyboard = rows
        return keyboard
    }

//    /**
//     * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—É–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏)
//     * @return –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup
//     */
//    private fun createEmptyKeyboard(): ReplyKeyboardMarkup {
//        val keyboard = ReplyKeyboardMarkup()
//        keyboard.selective = true
//        keyboard.resizeKeyboard = true
//        keyboard.oneTimeKeyboard = false
//
//        val rows = mutableListOf<KeyboardRow>()
//        keyboard.keyboard = rows
//        return keyboard
//    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param diceType —Ç–∏–ø –∫—É–±–∏–∫–∞ –¥–ª—è –±—Ä–æ—Å–∫–∞
     */
    private fun rollDice(userId: Long, diceType: DiceType, sessionCode: String) {
        val session = SessionManager.getSession(sessionCode) ?: return
        val player = session.getPlayer(userId) ?: return

        val rollResult = player.roll(diceType, 1)

        val resultText = "\uD83C\uDFB2 ${player.userName} –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫ ${diceType.displayName} –∏ –≤—ã–ø–∞–ª–æ: $rollResult"

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        session.players.forEach { (userId, _) -> sendMessage(userId, resultText) }

    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ—Å–∫–æ–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun sendStatistics(chatId: Long, userId: Long) {
        val sessionCode = seesionCodeByUserId[userId]
        val session = sessionCode?.let { SessionManager.getSession(it) } ?: SessionManager.getUserSession(userId)
        if (session == null) {
            sendMessage(chatId, "‚ùå –¢—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ –∏–≥—Ä–µ –∫–æ–º–∞–Ω–¥–æ–π /join")
            return
        }

        val stats = StringBuilder("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ—Å–∫–∏:\n\n")

        for (player in session.players.values) {
            stats.append("üë§ ${player.userName}: ")
            if (player.lastRoll != null) {
                val roll = player.lastRoll!!
                stats.append("${roll.diceType.displayName} ‚Üí ${roll.formatResult()}")
            } else {
                stats.append("–ø–æ–∫–∞ –Ω–µ –±—Ä–æ—Å–∞–ª –∫—É–±–∏–∫–∏")
            }
            stats.append("\n")
        }

        sendMessage(chatId, stats.toString())
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun leaveSession(chatId: Long, userId: Long) {
        val sessionCode = seesionCodeByUserId[userId]
        logger.info("User: $userId leave session:$sessionCode")
        if (sessionCode != null) {
            val session = SessionManager.getSession(sessionCode)
            val leaverName = session?.players?.get(userId)?.userName
            SessionManager.leaveSession(sessionCode, userId)
            userStates.remove(userId)
            pendingJoins.remove(userId)

            val allPlayers = SessionManager.getAllPlayersInSession(sessionCode)
            for (playerId in allPlayers) {
                if (playerId != userId) {
                    sendMessage(playerId, "üë§ $leaverName –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã!")
                }
            }
            sendMessage(chatId, "‚úÖ –¢—ã –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É!")
        } else {
            sendMessage(chatId, "‚ùå –¢—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!")
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param keyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
     * @param parseMode —Ä–µ–∂–∏–º —Ä–∞–∑–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
     */
    private fun sendMessage(chatId: Long, text: String, keyboard: ReplyKeyboardMarkup? = null, parseMode: String? = null) {
        val message = SendMessage().apply {
            this.chatId = chatId.toString()
            this.text = text
            if (keyboard != null) {
                this.replyMarkup = keyboard
            }
            if (parseMode != null) {
                this.parseMode = parseMode
            }
        }

        try {
            execute(message)
        } catch (e: TelegramApiException) {
            e.printStackTrace()
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –∫—É–±–∏–∫–æ–≤
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param diceText —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫—É–±–∏–∫–∞
     */
    private fun handleDiceButtonPress(chatId: Long, userId: Long, diceText: String) {
        val sessionCode = seesionCodeByUserId[userId]
        val session = sessionCode?.let { SessionManager.getSession(it) } ?: SessionManager.getUserSession(userId)
        val diceType = DiceType.values().find { it.displayName == diceText }

        if (session == null || !session.hasPlayer(userId)) {
            val rollResult = diceType?.let { BotUtils.roll(it).toString() } ?: "–¢–∞–∫–æ–≥–æ –∫—É–±–∏–∫–∞ –Ω–µ—Ç"
            sendMessage(chatId, rollResult)
            return
        }

        if (diceType != null) {
            rollDice(userId, diceType, session.code)
        }

    }

    /**
     * –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    enum class UserState {
        /** –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ */
        WAITING_FOR_NAME,

        /** –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã */
        WAITING_FOR_PLAYER_COUNT,

        /** –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ */
        WAITING_FOR_JOIN_NAME
    }
}